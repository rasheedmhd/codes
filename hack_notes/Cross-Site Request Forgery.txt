Cross-Site Request Forgery
Impersonating victims and making state changing request on their behalf.

Protections
- CSRF Tokens (set my web frameworks like rails/django)
- SameSite header settings (cookies) Strict/Lax/None + HttpOnly
prevent sending cookies on POST, AJAX and iframes
set Lax by some browsers like chromes

caveat:
- when browsers allow state-changing req with GET, CSRF positve
see GraphQL https://graphql.org/
- some websites needs cross site cookie sending to work so 
they manually set SameSite to None
- exploit browsers without default SameSite settings set

HUNTING
1. Spot state changing actions
2. Look for a Lack of CSRF Protections
3. Confirm the Vulnerability

GET requests should never modify any data on the server. 

Bypassing CSRF Protection
1. Through clickjacking
2. Change the Request Method
Sometimes sites will accept multiple request 
methods for the same endpoint (REST), 
but protection might not be in place for each of those methods.
- Change the req method and submit the req without the CSRF token

Bypass CSRF Tokens Stored on the Server
Websites can use CSRF tokens without proper validation
<html>
<form method="POST" action="https://email.example.com/password_change" id="csrf-form">
<input type="text" name="new_password" value="abc123">
<input type="text" name="csrf_token" value=""> 
<input type='submit' value="Submit">
</form>
<script>document.getElementById("csrf-form").submit();</script>
</html>
Sending blank tokens works bc sometimes validation only get called
when the token exist or isn't blank

3. Bypass Double-Submit CSRF Tokens
https://en.wikipedia.org/wiki/Session_fixation

4. Bypass CSRF Referer Header Check
But how do you know if the server relies on referer header?
- Remove the referer header
<html>
<meta name="referrer" content="no-referrer">
<form method="POST" action="https://email.example.com/password_change" id="csrf-form">
<input type="text" name="new_password" value="abc123">
<input type='submit' value="Submit">
</form>
<script>document.getElementById("csrf-form").submit();</script>
</html>

5. Bypass CSRF Protection by Using XSS
XSS will allow attackers to steal the legitimate
CSRF token and then craft forged requests by using XMLHttpRequest

Escalating the Attack
1. Leak User Information by Using CSRF
2. Create Stored Self-XSS by Using CSRF
3. Take Over User Accounts by Using CSRF
Since the user signed up via their social media account, they don’t need
to provide an old password to set the new password, so if CSRF protection
fails on this endpoint, an attacker would have the ability to set a password for
anyone who signed up via their social media account and hasn’t yet done so.

Delivering the CSRF Payload
1. Get users to click a link to a page
2. The page has an auto submittimg form
3. For CSRFs that you could execute via a GET request,
embed the request as an image directly e.g
<img src="https://email.example.com/set_password?new_password=this_account_is_now_mine">
4. deliver a CSRF payload to a large audience by
exploiting stored XSS


Finding Your First CSRF!
Armed with this knowledge about CSRF bugs, bypassing CSRF protection,
and escalating CSRF vulnerabilities, you’re now ready to look for your first
CSRF vulnerability! Hop on a bug bounty program and find your first CSRF
by following the steps covered in this chapter:
1. Spot the state-changing actions on the application and keep a note on
their locations and functionality.
2. Check these functionalities for CSRF protection. If you can’t spot any
protections, you might have found a vulnerability!
3. If any CSRF protection mechanisms are present, try to bypass the protection by using the protection-bypass techniques mentioned in this
chapter.
4. Confirm the vulnerability by crafting a malicious HTML page and visiting that page to see if the action has executed.
5. Think of strategies for delivering your payload to end users.
6. Draft your first CSRF report!













