Server Side Request Forgery
Tricking a server to make a request on your behalf.

Possible through signature forgery, this allows them
to presume a privileged position, bypass firewall 
controls and gain access to internal networks 

AWS 
http://169.254.169.254/latest/meta-data

PREVENTION
Impl Allow / block list 

Hunting 
Review source code - how it validates user provided urls req params
Test end points with the potential to be prone to SSRF vulns

1. Spot features prone to SSRF vulns
- webhooks (learn what they are)
- file uploads
- proxy services
- link and thumbnails expansions 
- urls embedded in files and processed (XML, PDF)
- API endpoints that accept URLS
- website allow users to set up web hook urls
and this can lead to SSRF's

Notice these potentially vulnerable features on the target site and
record
Step 2: Provide Potentially Vulnerable Endpoints with Internal URLs

Step 3: Check the Results
- Get a domain from a SP that gives you logging access 
provide your domain in the SSRF payload and listen for 
out bound req to it through the server logs
- use Netcat as a listener a
- outbound req isn't enough to exploit
- port scan the internal network for idiots(ports) that shouldn't be opened
but are opened

If you can identify a significant time
difference between requests to different ports, you have found an exploitable SSRF.

Bypassing SSRF
- circumvent allow list 
+ get an Open Redirect vuln on an allowlisted url
and pass it a redirect_to URL of the internal server/ip
+ checked for the allow list impl. if regex based, the regex
might be improperly configured or detrimentally flexible, 
with dynamic analysis, you might just circumvent it

- circumvent block list
+ make the server request a URL that you control and that redirects to the block listed address. 
For example, you can ask the target server to send a request to your server
+ use IPv6 addresses
Sometimes the SSRF protection mechanisms a site has implemented for
IPv4 might not have been implemented for IPv6. 
IPv6 address ::1 points to the localhost, and fc00:: is the first address on the
private network. [learn about ip addrs (internal networks)]
+ tricking the server with DNS
uses the same trick as the ipv6 trick above
A records - ipv4
AAAA records - ipv6 
nslookup DOMAIN
nslookup rasheedstarlet.com -type=AAAA
+ Switching Out the Encoding
These encoding methods don‚Äôt change how a server interprets the location of the address, 
but they might allow the input to slip under the radar of a blocklist if it bans only 
addresses that are encoded a certain way.
hex encoding, octal encoding, dword encoding, URL encoding, and mixed encoding.
hex eg https://public.example.com/proxy?url=https://0x7f.0x0.0x0.0x1
oct eg https://public.example.com/proxy?url=https://0177.0.0.01
dword eg https://public.example.com/proxy?url=https://2130706433
enc eg https://public.example.com/proxy?url=https://%6c%6f%63%61%6c%68%6f%73%74

This is just a small portion of bypasses you can try. You can use many
more creative ways to defeat protection and achieve SSRF. When you can‚Äôt
find a bypass that works, switch your perspective by asking yourself, how would
I implement a protection mechanism for this feature? Design what you think
the protection logic would look like.

Escalating the Attack
+ Network scanning
sending req to end points + ports and noting the returned results to
discover opened and closed ports 

+ Pull Instance Metadata
These API endpoints are accessible by default unless network admins
specifically block or disable them. The information these services reveal is
often extremely sensitive and could allow attackers to escalate SSRFs to 
serious information leaks and even RCE.  
For example, this
API request fetches all instance metadata from the running instance:
http://169.254.169.254/latest/meta-data/
Use this URL in an endpoint vulnerable to SSRF:
https://public.example.com/proxy?url=http://169.254.169.254/latest/meta-data/

https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html.

https://cloud.google.com/compute/docs/storing-retrieving-metadata/

+ Exploit Blind SSRFs
Because blind SSRFs don‚Äôt return a response or error message, their exploitation is often limited to network mapping, port scanning, and service
discovery

Finding Your First SSRF!
Let‚Äôs review the steps you can take to find your first SSRF:
1. Spot the features prone to SSRFs and take notes for future reference.
2. Set up a callback listener to detect blind SSRFs by using an online service, Netcat, or Burp‚Äôs Collaborator feature.
3. Provide the potentially vulnerable endpoints with common internal
addresses or the address of your callback listener.
4. Check if the server responds with information that confirms the SSRF.
Or, in the case of a blind SSRF, check your server logs for requests from
the target server.
5. In the case of a blind SSRF, check if the server behavior differs when
you request different hosts or ports.
6. If SSRF protection is implemented, try to bypass it by using the strategies discussed in this chapter.
7. Pick a tactic to escalate the SSRF.
8. Draft your first SSRF report!


Decimal, Octal, Hex, and Other Representations
üîπ Standard forms
localhost
127.0.0.1

üîπ Decimal
2130706433
(This is 127*256^3 + 0*256^2 + 0*256 + 1 ‚Äî the decimal of 127.0.0.1)

üîπ Octal
017700000001
(Octal representation of 127.0.0.1)

üîπ Hexadecimal
0x7f000001
(Hex of 127.0.0.1)

üîπ Mixed or Dword IPs
127.1
127.0.1
127.000.000.001
127.000000001
0x7f.0.0.1
127.1.2.3 (if the filter only blocks exact 127.0.0.1)

‚úÖ IPv6 Variants
[::1] ‚Äì loopback address
::ffff:127.0.0.1 ‚Äì IPv4-mapped IPv6 address
%5B::1%5D ‚Äì URL-encoded [::1]

‚úÖ Hostname Tricks
localhost.localdomain
ip6-localhost
localhost. (trailing dot)
127.0.0.1.xip.io, 
127.0.0.1.sslip.io (public services that resolve to loopback)

‚ö†Ô∏è Defenses Against SSRF Bypass
To mitigate these tricks:
Canonicalize the IP/hostname before validation:
Use getaddrinfo() or inet_aton() to resolve and normalize.
Reject requests that resolve to loopback/internal/private ranges.

Deny internal IP ranges: Block these ranges:
127.0.0.0/8
10.0.0.0/8
172.16.0.0/12
192.168.0.0/16
::1, fc00::/7, etc.

Don't allow raw URLs from users. Instead, use whitelisted domains or fetch by ID.





