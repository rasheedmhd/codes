IDORs (Insecure Direct Object References)
Getting access to data/information a user isn't authorized
and authenticated to have access to by directly referencing 
the object of data/info.

PREVENTION
IDORs happen when an application fails at two things. 
First, it fails to implement access control based on user identity. 

FIX:
Check the user’s identity and permissions before granting access to a resource.

Second, it fails to randomize object IDs and instead 
keeps references to data objects, like a file or a database
entry, predictable.

FIX:
Use a unique, unpredictable key or a hashed
identifier to reference each user’s resources. 
Hashing IDs with a secure algorithm and a secret key makes it 
difficult for attackers to guess the hashed ID strings.

HUNTING
The best way to discover IDORs is through a source code review 
that checks if all direct object references are protected
by access control.

Step 1: Create two different accounts 
Create two different accounts on the target website. 
If users can have different permissions, create two accounts for each permission
level. 
1 or more attacker accounts, used to carry out the IDOR attacks.
1 or more victim accounts used to observe the effects of the attack
+ test with unauthenticated users

Step 2: Discover Features
Discover as many application features as possible. Use the highest privileged account
Note state changing features/return user info

Step 3: Capture Requests
Browse through each application feature you mapped in the preceding step
and capture all the requests going from your web client to the server. Inspect
each request carefully and find the parameters that contain numbers, usernames, or IDs. Remember that you can trigger IDORs from different locations
within a request, like URL parameters, form fields, filepaths, headers, and
cookies

Step 4: Change the IDs
switch the IDs in the sensitive requests and check if the information
returned also changes. See if you can access the victim account’s information by using the attacker account. And check if you can modify the second
user’s account from the first.


By-passing IDORS
1. Encoded IDs and Hashed IDs
2. Leaked IDs
It might also be possible that the application leaks IDs via another API endpoint or other public pages of the application, like the profile page of a user
3. Offer the Application an ID, Even If It Doesn’t Ask for One
In modern web applications, you’ll commonly encounter scenarios in which
the application uses cookies instead of IDs to identify the resources a user
can access.
4. Keep an Eye Out for Blind IDORs
5. Change the Request Method
If one HTTP request method doesn’t work, you can try plenty of others instead:
GET, POST, PUT, DELETE, PATCH, and so on. Applications often enable
multiple request methods on the same endpoint but fail to implement the same
access control for each method.
6. Change the Requested File Type
Switching the file type of the requested file sometimes leads the server to
process the authorization differently. Applications might be flexible about
how the user can identify information: they could allow users to either use
IDs to reference a file or use the filename directly. But applications often
fail to implement the same access controls for each method of reference.

Escalating the Attack
In terms of the state-changing, write-based IDORs, look for IDORs in
password reset, password change, and account recovery features, as these
often have the highest business impact. Target these over, say, a feature that
changes email subscription settings.

You can also combine IDORs with other vulnerabilities to increase their
impact. For example, a write-based IDOR can be combined with self-XSS
to form a stored XSS. An IDOR on a password reset endpoint combined
with username enumeration can lead to a mass account takeover. Or a
write IDOR on an admin account may even lead to RCE!

Finding Your First IDOR!
Now that you know what IDORs are, how to bypass IDOR protection, and
how to escalate IDORs, you’re ready to look for your first one! Hop on a bug
bounty program and follow the steps discussed in this chapter:
1. Create two accounts for each application role and designate one as the
attacker account and the other as the victim account.
2. Discover features in the application that might lead to IDORs. Pay attention to features that return sensitive information or modify user data.
3. Revisit the features you discovered in step 2. With a proxy, intercept your
browser traffic while you browse through the sensitive functionalities.
4. With a proxy, intercept each sensitive request and switch out the IDs
that you see in the requests. If switching out IDs grants you access to
other users’ information or lets you change their data, you might have
found an IDOR.
5. Don’t despair if the application seems to be immune to IDORs. Use
this opportunity to try a protection-bypass technique! If the application uses an encoded, hashed, or randomized ID, you can try decoding
or predicting the IDs. You can also try supplying the application with
an ID when it does not ask for one. Finally, sometimes changing the
request method type or file type makes all the difference.
6. Monitor for information leaks in export files, email, and text alerts. An
IDOR now might lead to an info leak in the future.
7. Draft your first IDOR report!














