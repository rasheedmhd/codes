The objective of web cache poisoning is to send a request that causes a harmful response that gets saved in the
cache and served to other users.

The  first step is to identify unkeyed inputs. Doing this manually is tedious so I've developed an open source Burp
Suite extension called Param Miner that automates this step by guessing header/cookie names, and observing
whether they have an effect on the application's response.
After finding an unkeyed input, the next steps are to assess how much damage you can do with it, then try and
get it stored in the cache. If that fails, you'll need to gain a better understanding of how the cache works and hunt
down a cacheable target page before retrying. Whether a page gets cached may be based on a variety of factors
including the file extension, content-type, route, status code, and response headers.
