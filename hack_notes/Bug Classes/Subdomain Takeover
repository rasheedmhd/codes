1 host subdomain.domain.com 
2 dig domain.com  / subdomain.domain.com 
3 whois IP_ADDR | "org-name" / "OrgName" 
"org-name" : Github 
"OrgName"  : Cloudflare 

# Second-order subdomain takeovers
Also known as "broken link hijacking", are vulnerable subdomains which do not 
necessarily belong to the target but are used to serve content on the target's website. 
This means that a resource is being imported on the target page, 
for example, via a blob of JavaScript and the hacker can claim 
the subdomain from which the resource is being imported. 
Hijacking a host that is used somewhere on the page can ultimately lead to stored cross-site scripting, 
since the adversary can load arbitrary client-side code on the target page. 


# Discovery 
DNS Dumpster and VirusTotal, index subdomains that have been crawled in 
the past allowing you to collect and sort the results quickly without much effort.

Scraping does not only consist of using indexing pages, remember to check the targetâ€™s GIT repositories, 
Content Security Policy headers, source code, issue trackers, etc. 
The list of sources is endless, and I constantly discover new methods for increasing my results.

# Tools
DNSDUmpster
Amass 
Sublist3r 
Subfinder https://github.com/projectdiscovery/subfinder
Massdns 
Altdns https://github.com/infosec-au/altdns

# Wordlist 
https://gist.github.com/jhaddix/86a06c5dc309d08580a018c66354a056

# Fingerprinting 
Altdns
In order to recursively brute force subdomains, take a look at Shubham Shah's Altdns script. 
Running your custom word list after fingerprinting 


# Filtering 
The first task that I love automating is filtering out live subdomains from a list of hosts. When scraping for subdomains, some results will be outdated and no longer reachable; therefore, we need to determine which hosts are live. Please keep in mind, as we will see later, just because a host does not resolve, does not necessarily mean it cannot be hijacked.

# Steps 
Discovery
|    |___ bruteforce
|    |___ scrape 
|
|____ subdomains.txt 
    |___ extract live subdomains 
        |___ live_subdomains.txt 


# Screenshotting
gowitness https://github.com/sensepost/gowitness
gowitness scan file -f filename
gowitness scan file -f epic_domains --write-db --write-jsonl

For taking screenshots, my go-to tool is currently EyeWitness. 
This tool generates an HTML document containing all the screenshots, 
response bodies, and headers from your list of hosts.

> ./EyeWitness -f live.txt -d out --headless

EyeWitness can be a little too heavy for some cases and you might only want to store the page's contents via a simple GET request to the top-level directory of the subdomain. For cases like these, I use Tom Hudson's meg. meg sends requests concurrently and then store the output into plain-text files

> meg -d 10 -c 200 / live.txt

# Extra Mile Looking
Whenever you encounter dead DNS records, do not just assume that you cannot hijack that subdomain. 
As Frans points out, the host command might return an error, but running dig will unveil the dead records.

# Exploitation 
When determining plausible attack scenarios with a misconfigured subdomain, 
it is crucial to understand how the subdomain interacts with the base name and the target's core service.
# Cookies
subdomain.example.com can modify cookies scoped to example.com. 
This is important to remember as this could potentially allow you to hijack a victim's session on the base name.

> curl -sI https://hackerone.com | grep -i "content-security-policy"

However, whatever you do, do not publish anything on the index page
It is best practice to serve an HTML file on a hidden path containing a secret message in an HTML comment. 
That should be enough to demonstrate the issue when initially contacting the programme about your finding.

# CNAME subdomain takeover 
Domain name (e.g., sub.example.com) uses a CNAME record to another domain 
(e.g., sub.example.com CNAME anotherdomain.com).
At some point in time, anotherdomain.com expires and is available for registration by anyone.
Since the CNAME record is not deleted from example.com DNS zone, anyone who registers 
anotherdomain.com has full control over sub.example.com until the DNS record is present.

# NS subdomain takeover. 
If the base domain of canonical domain name of at least one NS record is available for registration, 
the source domain name is vulnerable to subdomain takeover.

# MX subdomain takeover
MX subdomain takeover has the lowest impact. Since MX records are used only to receive e-mails, 
gaining control over canonical domain name in MX record only allows an attacker to receive e-mails 
addressed to source domain name.


I use the following regexes to test the correct canonical name:
> {bucketname}.s3.amazonaws.com
> ^[a-z0-9\.\-]{0,63}\.?s3.amazonaws\.com$

> {bucketname}.s3-website(.|-){region}.amazonaws.com (+ possible China region)
> ^[a-z0-9\.\-]{3,63}\.s3-website[\.-](eu|ap|us|ca|sa|cn)-\w{2,14}-\d{1,2}\.amazonaws.com(\.cn)?$

> {bucketname}.s3(.|-){region}.amazonaws.com
> ^[a-z0-9\.\-]{3,63}\.s3[\.-](eu|ap|us|ca|sa)-\w{2,14}-\d{1,2}\.amazonaws.com$

> {bucketname}.s3.dualstack.{region}.amazonaws.com
> ^[a-z0-9\.\-]{3,63}\.s3.dualstack\.(eu|ap|us|ca|sa)-\w{2,14}-\d{1,2}\.amazonaws.com$

> http -b GET http://{SOURCE DOMAIN NAME} | grep -E -q '<Code>NoSuchBucket</Code>|<li>Code: NoSuchBucket</li>' && echo "Subdomain takeover may be possible" || echo "Subdomain takeover is not possible"

>  amass enum -active -d owasp.org -brute -w /root/dns_lists/deepmagic.com-top50kprefixes.txt -ip -dir amass4owasp -config /root/amass/config.yaml -o amass_results_owasp.txt -w https://github.com/danielmiessler/SecLists.git
https://0xpatrik.com/takeover-proofs/

>  amass -active -brute -o hosts.txt -d yahoo.com
> amass -active -brute -o neon -d neon.tech 


FFUF
> ffuf -ac -v -u https://domain/FUZZ -w wordlist.txt.

# DNSGEN dnsgen
Basic Usage
## Basic domain permutation
> dnsgen domains.txt

## With custom wordlist and output file
> dnsgen -w custom_wordlist.txt -o results.txt domains.txt

## Using fast mode for quick assessment
> dnsgen -f domains.txt

## Pipe with massdns for resolution
> cat domains.txt | dnsgen - | massdns -r resolvers.txt -t A -o J --flush 2>/dev/null

# Integration with MassDNS
Get clean resolved domains:

# Generate and resolve
> dnsgen hosts.txt > wordlist.txt
> massdns -r resolvers.txt -o S wordlist.txt | grep -e ' A ' | \
  cut -d 'A' -f 1 | rev | cut -d "." -f1 --complement | \
  rev | sort | uniq > resolved_domains.txt



# Altdns Usage
> altdns -i subdomains.txt -o data_output -w words.txt -r -s results_output.txt

> subfinder -d neon.tech -w subdomains-top1million-110000.txt -o found.txt
> amass enum -d neon.tech -brute -w subdomains-top1million-110000.txt -o neon_subs.txt

# Gobuster 
Examples
> gobuster dns -d mysite.com -t 50 -w common-names.txt

Normal Sample run:
> gobuster dns -d google.com -w ~/wordlists/subdomains.txt

Show IP Sample:
> gobuster dns -d google.com -w ~/wordlists/subdomains.txt -i

Base domain validation warning when the base domain fails to resolve. 
This is a warning rather than a failure in case the user fat-fingers while typing the domain.
> gobuster dns -d yp.to -w ~/wordlists/subdomains.txt -i

Wildcard DNS:
> gobuster dns -d 0.0.1.xip.io -w ~/wordlists/subdomains.txt

If the user wants to force processing of a domain that has wildcard entries, use --wildcard:
> gobuster dns -d 0.0.1.xip.io -w ~/wordlists/subdomains.txt --wildcard
