Recon 
Look for "Sign in / Sign up with <social-media, mostly, github, google etc> buttons
Proxy Sign in and Sign Up request in Proxy to inspect looking for markers, query
parameters used mostly for oauth like client_id, redirect_uri, scope, state 
Check directories for
/.well-known/oauth-authorization-server
/.well-known/openid-configuration


4 important parties
- Resource Owner
- Client
- Authorization Server 
- Resource Server

Requests to  /oath/ to client
Client redirects to the Resource Server with
- client_id
- redirect_uri
- response_type
- scope
- state(recommended) unguessable value that prevents cross-site request forgeries

Exploiting OAuth authentication vulnerabilities
Vulnerabilities in the client application
    Improper implementation of the implicit grant type
    Flawed CSRF protection
Vulnerabilities in the OAuth service
    Leaking authorization codes and access tokens
    Flawed scope validation
    Unverified user registration

Improper implementation of the implicit grant type
Example: Where the client decides to persist a state of the user 
that owns the access token that is has been granted. 
Sending a post req to its backend server with a payload 
containing the access token and additional info like Email, Id etc 
We can intercept this request and modify the email's etc 

Flaw CSRF Protection
Where the state parameter, is not sent to the server or easily manipulated. 
It potentially means that an attacker can initiate an OAuth flow themselves before tricking 
a user's browser into completing it, similar to a traditional CSRF attack

Leaking authorization codes and access tokens via Open Redirect 
using state or nonce protection does not necessarily prevent these attacks 
because an attacker can generate new values from their own browser.

By stealing a valid code or token, the attacker may be able to access the victim's data.
potentially leading to an account take over 
More seriously, the attacker could potentially log in as the victim user on 
any client application that is registered with this OAuth service. 

If the OAuth service fails to validate this URI properly, an attacker may be able 
to construct a CSRF-like attack, tricking the victim's browser into initiating 
an OAuth flow that will send the code or token to an attacker-controlled redirect_uri

In the authorization code flow, an attacker can potentially steal the victim's code before it is used. 
They can then send this code to the client application's legitimate /callback endpoint 
(the original redirect_uri) to get access to the user's account. 
In this scenario, an attacker does not even need to know the client secret or the resulting access token. 
As long as the victim has a valid session with the OAuth service,
the client application will simply complete the code/token exchange on the attacker's behalf 
before logging them in to the victim's account. 


Flawed redirect_uri validation
When auditing an OAuth flow, you should try experimenting with the 
redirect_uri parameter to understand how it is being validated.

If you can append extra values to the default redirect_uri parameter, 
you might be able to exploit discrepancies between the parsing of the URI 
by the different components of the OAuth service.
- Test with SSRF bypass payloads 
- Server-Side parameter pollution 
- you should try submitting duplicate redirect_uri
https://default-host.com &@foo.evil-user.net#@bar.evil-user.net/
Some servers also give special treatment to localhost
- test with localhost.evil-user.net
You shouldn't limit your testing to just the redirect_uri parameter in isolation. 
Experiment with different combinations of changes to several parameters. 
Sometimes changing one parameter can affect the validation of others. 
Eg: changing the response_mode from query to fragment can sometimes completely 
alter the parsing of the redirect_uri, allowing you to submit URIs that would otherwise be blocked. 
if you notice that the web_message response mode is supported, 
this often allows a wider range of subdomains in the redirect_uri

Stealing codes and access tokens via a proxy page
try to work out whether you can change the redirect_uri parameter to 
point to any other pages on a whitelisted domain. 
you may be able to use directory traversal tricks to supply any arbitrary path on the domain. 
Something like this: https://client-app.com/oauth/callback/../../example/path
Other techniques 
Dangerous JavaScript that handles query parameters and URL fragments
XSS vulnerabilities
HTML injection vulnerabilities

Flawed scope validation
Scope upgrade: authorization code flow - authorization code grant type 
Where the client adds additional scopes to in the token grant phase, and if 
the Resource server fails to get the scope that was initially granted by the 
resource owner to the client 

Once they have stolen an access token, they can send a normal browser-based request 
to the OAuth service's /userinfo endpoint, manually adding a new scope parameter in the process.

Ideally, the OAuth service should validate this scope value against 
the one that was used when generating the token, but this isn't always the case. 
If the added scope doesn't exceed the access level of the previously granted scope, 
he is granted permission to the added scope

Unverified user registration - highly unlikely for these modern popular oauth providers/servers


OAuth Dirty Dancing to steal codes & tokens
the idea is to end up on some form of error page or similar that 
still loads third-party Javascript for us to leak the tokens.

Breaking State Intentionally
1. Intercept the redirect response from the authorization server
and modify the state, at this point the code/token has already 
been created if the user was logged in already to the authorization server
2. Because the client set the state and needs to verify that the state is valid,
it will error out/reject the state/request and now the attacker has the correct state
3. Attacker can then send the right state and code to the client callback endpoint
and trick the client to complete the access token request and grant and then 
proceeding to log the attacker into the victim's account.

if an attacker can send a login-flow-link to a victim tainted with a valid state of the attacker, 
the OAuth-dance will fail for the victim and the code will never be sent to the OAuth-provider. 
The code will still be possible to use if the attacker can get it.

Attacker starts a sign-in flow on the website using “Sign in with X”.
Attacker uses the state-value and constructs a link for the victim to sign in with the OAuth-provider but with the attacker’s state.
Victim gets signed-in with the link and redirected back to the website.
Website validates the state for the victim and stops processing the sign-in flow since it’s not a valid state. Error page for victim.
Attacker finds a way to leak the code from the error page.
Attacker can now sign in with their own state and the code leaked from the victim.

Response-type/Response-mode switching
Changing response-types or response-modes of the OAuth-dance will effect in what 
way the codes or tokens are sent back to the website, 
which most of the time causes unexpected behavior.
https://labs.detectify.com/writeups/account-hijacking-using-dirty-dancing-in-sign-in-oauth-flows/#response-type-response-mode-switching


Redirect-uri case shifting
Some OAuth-providers allows case-shifting in the path of the redirect_uri
If the whitelisted routes are case-sensitive, case shifting will cause a non happy path 
...
response_type=id_token&
redirect_uri=https://example.com/CaLlBaCk&
...

response_type=code won't work easily because of the additional redirect_uri validation 
at the resource server before token grant but in a response_type=token|id_token, since
there is no need to hit the resource server, this trick works 

Chaining an Open Redirect + Path traversal can lead to leaking 
access tokens or codes. A dirty dance 

Redirect-uri parameter appending
Some OAuth-providers allow additional query or fragment parameters to be added to the redirect_uri. 
You can use this by triggering a non-happy path by providing the same parameters that will be appended to the URL
response_type=code&
redirect_uri=https://example.com/callback%3fcode=xxx%26
becomes
https://example.com/callback?code=xxx&code=real-code
response_type=code&
redirect_uri=https://example.com/callback%23id_token=xxx%26
becomes 
https://example.com/callback#id_token=xxx&id_token=real-id_token
Depending on the javascript that fetches the fragment parameters when multiple 
parameters of the same name are present, this could also end up in a non-happy path.

Redirect-uri leftovers or misconfigurations
the start-page also as a valid redirect_uri. 
For example, if redirect_uri=https://auth.example.com/callback
redirect_uri=https://example.com/
redirect_uri=https://example.com
redirect_uri=https://www.example.com/
redirect_uri=https://www.example.com