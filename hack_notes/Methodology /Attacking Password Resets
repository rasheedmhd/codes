Testing for User Enumeration 


Testing for Rate Limiting / Brute Force Attacks
No throttling on:
Reset requests
OTP/token submissions

Testing for Reset Token Predictability 
Tokens are short, sequential, or easily guessable.
JWTs used insecurely (e.g., none algorithm or weak secret).

Testing for Password Reset Token Leakage
Token exposed in:
Browser history (GET param)
Referrer header (sent to third parties)
Log files

Testing for Missing Expiry or Revocation of Token
Token does not expire or gets re-used after password change.
Fix: Short token lifespan; invalidate on password change.

Testing for Cross-Site Scripting (XSS) via Email or Reset Page
If email includes user input or reset page improperly handles token, XSS might be possible.
E.g., malicious username reflected into reset page without sanitization.

Testing for Cross-Site Request Forgery (CSRF)
Lack of CSRF protection on reset form submission or request initiation.

Testing for Insecure Token Storage
Token stored in client-side JS (e.g., in localStorage) 
or in predictable cookies.

Testing for Insecure Direct Object Reference (IDOR)
Reset token or page can be accessed for other users 
(e.g., token guessable or passed in path /reset/user123/token123).

Testing for Open Redirects
If the reset page or email includes a redirect (e.g., next=...), 
test for open redirect vulnerabilities.

Testing for Race Conditions
Submitting multiple reset requests simultaneously could 
reuse the same token or reset multiple accounts.

Testing for Improper Authorization
A user can reset passwords of other users due to weak verification 
(e.g., passing user_id in request body and trusting it blindly).

Testing for Missing or Weak CAPTCHA
Reset functionality can be automated for abuse if CAPTCHA is missing or broken.

Testing for Improper Email Verification
No ownership check (e.g., email is accepted without sending confirmation before enabling reset).

Testing for Email Spoofing / Phishing via Legit Channel
Emails can be spoofed or contain unsafe content 
(e.g., attacker can inject HTML/JS into email body if username is used unsanitized).


Testing for Password Poisoning 

1 Acquire victim's email address or username, 
2 submit a password reset request on their behalf. 
3 intercept the resulting HTTP request and modify the Host header so that it points to a domain that you control. 
https://portswigger.net/web-security/host-header/exploiting#web-cache-poisoning-via-the-host-header

The victim receives a genuine password reset email directly from the website. 
This seems to contain an ordinary link to reset their password and, crucially,
contains a valid password reset token that is associated with their account. 

However, the domain name in the URL points to the attacker's server:
https://evil-user.net/reset?token=0a1b2c3d4e5f6g7h8i9j

If the victim clicks this link (or it is fetched in some other way, for example, by an antivirus scanner) 
the password reset token will be delivered to the attacker's server.

visit the real URL for the vulnerable website and supply the victim's stolen token via the corresponding parameter. 
reset the user's password and subsequently log in to their account.


Testing for HTTP Parameter Pollution 
Testing getting User's reset email sent your email
HPP occurs when an attacker sends multiple HTTP parameters with the same name,
which may be interpreted differently by the backend depending on the language or framework.
POST /forgot-password
Content-Type: application/x-www-form-urlencoded

email=user@example.com&email=attacker@example.com

GET /forgot-password?email=user@example.com&email=attacker@example.com

üîç What to look for:
Which email gets processed?
Are both sent reset emails?
Any unexpected behavior or errors?
üí° Mitigation:
Sanitize and validate that only one parameter value is accepted.
Use middleware (e.g., in Express: hpp module).

Test Cases
Valid Email
Non-existent Email
Blank Email 
Multiple Email via HPP


| Vulnerability               | Example Exploit                       |
| --------------------------- | ------------------------------------- |
| HTTP Parameter Pollution    | Duplicate `email` param               |
| Password Reset Poisoning    | Host header injection                 |
| User Enumeration            | Different error messages              |
| Rate Limiting / Brute Force | No throttling on reset endpoint       |
| Predictable or Weak Tokens  | Guessable token values                |
| Token Leakage               | Token in URL or Referer               |
| Token Reuse or Long Expiry  | Reset link usable multiple times      |
| XSS via Email/Reset Page    | Unsanitized user input in templates   |
| CSRF on Token Submission    | No CSRF protection on reset           |
| IDOR in Reset Process       | Reset another user's password         |
| Open Redirects              | Unsafe `next=` params in emails/pages |
| Race Conditions             | Multiple simultaneous reset attempts  |
| Missing CAPTCHA             | Automated reset attacks               |
| No Email Ownership Check    | Anyone can reset any known email      |
| Email Spoofing or Injection | Malicious content in reset email      |
