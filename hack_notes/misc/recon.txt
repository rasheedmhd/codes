NOTES ON RECONNAISSANCE
1. Confirm that active recon is allowed
2. Manual scope walk through - aim is to reveal the attack surface
3. Uncover the tech and infrastructure of the application
4. Google dork for info to advance your hacking, eg: searching for payloads

SCOPE DISCOVERY
1. Whois and Reverse Whois
2. Nslookup
3. Certificates searching with crt.sh
4. Enumerate Subdomains
   Sublist3r - query search engines + subdomain dbs
   Gobuster  - brute forcer
   Amass     - uses DNS zone transfers, certificate parsing, search engines and subdomain databases to find subdomains.
   Altdns    - https://github.com/infosec-au/altdns/
   SubBrute  - brute forcer
   Subfinder

+ Screenshotting [ gowitness + eyewitness + aquatone + HTTPScreenshotter ]
+ Content Discovery (Burp Intruder on Pro)
+ Test to uncover the tech stack
+ Map the functionalities of the app 
= 1 Look for markers of vulnerabilities |  2 Define a specific goal for testing | 3 Follow a checklist.
1 Look for behaviors commonly assoc with vulns -> found something interesting -> test application
2 Define the vuln you want to pop and start testing for it. Jobert Abma, Philippe Harewood advocates this 
ignore all other possibilities and focus entirely on your end goal. 
You only stop and begin testing if you find something that leads to your goal. 
3 OWASP 

================== zseano from zseano's methodology
To date, I’ve had the most success after exploring a target, 
understanding the functionality it provides, and mapping that functionality to
vulnerability types for testing. But areas that I continue to explore, and encourage 
you to look into as well, are automation and documenting your methodology.
==================


WORD LISTS
https://github.com/danielmiessler/SecLists/
https://github.com/assetnote/commonspeak2/
5. Service Enumeration (port scanning)
- nmap, masscan
PASSIVE RECON:	Shodan . Project Sonar . Censys
6. Crawl all pages - ZAP Spider
7. Third Party Hosting 
- Use google dorking to plus tools like lazys3
- Use https://buckets.grayhatwarfare.com/
  to discover open buckets, use aws cli to read the bucket contents
- Https://github.com/nahamsec/lazys3/ - I can rewrite it in Rust/Go/TypeScript
8. Github Recon - tools 
Gitrob (https://github.com/michenriksen/gitrob/)
TruffleHog (https://github.com/trufflesecurity/truffleHog/) 
9. OSINT
10. Fingerprinting
- Nmap domain_name -sV
- Inspecting req headers in Burp proxy
- View HTML source code
- Wapplyzer . Builtwith . Stackshare . Retire.js . Whatruns . Whatweb

DNS discorvry with Gobuster
gobuster dns -d moonpay.com -c -i --wildcard --no-color -o gobuster_dns_enum -v -w /Users/Starlet/Dev/Sec/kiterunner/wordlist/best-dns-wordlist.txt 



Vuln Search:	https://www.cvedetails.com/documentation/
Wordpress https://www.sitename.org/wp-json/wp/v2/users

======================================================================================================================================================
Web Security Testing Guide 
======================================================================================================================================================
OWASP WSTG - 4.1.X
1 Conduct Search Engine Discovery Reconnaissance for Information Leakage
- Google dorking
- Use different search engines bc they index differently
- Get robots.txt file

2. Fingerprinting web servers
- Banner grab ( curl -I domain)
- Server response adds the server name and version
- If server obscures name and version, study response header ordering
Send Malformed Requests
- Send Non Existent HTTP Method to server
- Study default server error response msgs
- Tools: Netcraft . Nikto . Nmap

3. Review Webserver Metafiles for Information Leakage
Identify hidden + obfuscated paths and functionality through metadata files analysis.
Extract and map other information that could lead to a better understanding of the system
- Review META tags . Robots.txt . Sitemaps . Security.txt . humans.txt
wget --no-verbose https://www.google.com/sitemap.xml && head -n8 sitemap.xml
curl -O -Ss https://www.moonpay.com/robots.txt && head -n5 robots.txt
Security TXT
https://example.com/security.txt
https://example.com/.well-known/security.txt
wget --no-verbose https://www.linkedin.com/.well-known/security.txt && cat security.txt
Humans TXT 
wget --no-verbose  https://www.google.com/humans.txt && cat humans.txt

4. Enumerate Applications on Webserver
Enumerate the applications within the scope that exist on the web server.
This is to discover targets to test, remember that sometimes the org might
not even be aware of these targets hiding under an IP Address
There are three factors influencing how many applications are related to a given DNS name (or an IP address):
Different Base URLs: 
For example, the same symbolic name may be associated to three web applications such as: 
https://www.example.com/app1  |  https://www.example.com/app2  |  https://www.example.com/app3
Non Standard ports:   
Web apps can be hosted on different ports != 443/80
nmap -sV > nmap –Pn –sT –sV –p0-65535
Virtual Hosts: 
DNS allows a single IP address to be associated with one or more symbolic names.
Using site: operator to find other apps under 1 IP 
This leverages cached, indexed, other pages linked to those apps 
DNS + directory enumeration and brute forcing and running a ip address 
look up on the returned hits 
nmap all port service scan results
Another unspecified service on port 8000; this might possibly be HTTP,
since it is not uncommon to find HTTP servers on this port. Let’s examine this issue:
$ telnet 192.168.10.100 8000
or curl or visit url 
The same task may be performed by vulnerability scanners that can identify HTTP[S] services running on non-standard ports. 
Eg Nessus is capable of identifying them on arbitrary ports (provided it is instructed to scan all the ports), 
and will provide, with respect to Nmap, a number of tests on known web server vulnerabilities, 
as well as on the TLS/SSL configuration of HTTPS services. As hinted before, 
Nessus is also able to spot popular applications or web interfaces which could otherwise go unnoticed
(for example, a Tomcat administrative interface).

Approaches to Address Issue 3 - Virtual Hosts
There are a number of techniques which may be used to identify DNS names associated to a given IP address x.y.z.t.

DNS Zone Transfers
host -t ns www.owasp.org
returns nameservers 
host -l www.owasp.org <nameserver>

DNS Inverse Queries
dig -x 93.184.216.34 +short
host 93.184.216.34
nslookup 93.184.216.34

Web Based DNS Searches 
https://searchdns.netcraft.com/

Reverse IP Services
MxToolbox Reverse IP  https://mxtoolbox.com/ReverseLookup.aspx
DNSstuff https://www.dnsstuff.com/scan-network-for-device-ip-address
Net Square 

openssl s_client -connect 100.64.100.1:443 </dev/null 2>/dev/null \
  | openssl x509 -noout -text \
  | grep -E 'Subject:|DNS:'

5. Review Web Page Content for Information Leakage
Review Web Page Comments and Metadata
Identifying JavaScript Code and Gather JavaScript Files
Identifying Source Map Files
Source map files will usually be loaded when DevTools open. 
You might find source map files by adding the “.map” after the ext of external JavaScript files.
Eg: in /static/js/main.chunk.js file, visit /static/js/main.chunk.js.map.
Identify Redirect Responses which Leak Information

6. Identify Application Entry Points
Identify possible entry and injection points through request and response analysis.
Pay attention to all HTTP requests as well as every parameter and form field
that is passed to the application.
Make special note of any hidden form fields that are being passed to the application.
Use Attack Surface Detector to uncover end points and parameters that they receive. 

7. Map Execution Paths Through Application
ZAP spidering
ZAP offers various automatic spidering options, which can be leveraged based on the tester’s needs:
Spider . Ajax Spider . Check for OpenAPI Support

8. Fingerprint Web Application Framework
Several locations exists to consider to identify frameworks or components:
HTTP headers . X-Powered-By . X-Generator . Framework Specific Cookies
HTML source code                  .    Specific files and folders eg /wp-admin/ robots.txt
File extensions .asp .jsp .php    .    Error messages

9. Map Application Architecture
Web Framework  .  Web Server  .  Database
PaaS  .  Serverless   .   Microservices
Port scan server for any open ports associated with specific databases.
Trigger SQL/NoSQL related error messages [ find existing errors from a search engine ]
Load Balancers
Content Delivery Network (CDN) [to read]
If the majority of the ports are shown as “closed”
(i.e, they return a RST packet in response to the initial SYN packet),
this suggests that the server may not be protected by a firewall.
If the ports are shown as “filtered”
(i.e, no response is received when sending a SYN packet to an unused port),
then a firewall is most likely to be in place.
Network Intrusion Detection and Prevention System
Web App Firewall
If a cloud-based WAF is in use, then it may be possible to bypass it
by directly accessing the backend server, using the same methods discussed
in the Content Delivery Network section.

10. TESTING HTTP METHODS
Enumerate supported HTTP methods.
Test for Access Control bypass.
Test HTTP method overriding techniques.

Discover the Supported Methods
! all servers may respond to OPTIONS requests
some may  return inaccurate information.
Servers may support different methods for different paths.
A method might not supported for the root / directory,
doesn't indicate that it won’t be supported elsewhere.
For reliability, make a request with that method type,
and examine the server response. If the method is not permitted,
the server will return a 405 Method Not Allowed status.

Some servers treat unknown methods as equivalent to GET,
So they may respond to arbitrary methods
This can occasionally be useful to evade a web application firewall,
or any other filtering that blocks specific methods.
curl -X FOO https://example.org

Using PUT to upload files to older webservers
curl https://example.org --upload-file test.html

Using DELETE to delete files form a webserver
curl https://example.org/test.html -X DELETE


Testing for Access Control Bypass
If application redirects users to a login page with a 302 code,
it may be possible to bypass this by making a request with a different HTTP method,
such as HEAD, POST or even a made up method such as FOO.
If the web application responds with a HTTP/1.1 200 OK rather than the expected HTTP/1.1 302 Found,
it may then be possible to bypass the authentication or authorization.


Testing for HTTP Method Overriding
Some web frameworks provide a way to override the HTTP method in the request.
They achieve this by emulating the missing HTTP verbs and passing some custom headers in the requests.
The main purpose of this is to circumvent a middleware application
(such as a proxy or web application firewall)
which blocks specific methods.
The following alternative HTTP headers could potentially be used:

X-HTTP-Method
X-HTTP-Method-Override
X-Method-Override

Preflight request
A CORS preflight request is a CORS request that checks to see if the CORS protocol is understood and a server is aware using specific methods and headers.

OPTIONS	List supported HTTP methods.	Perform a CORS Preflight request.

Test HTTP Strict Transport Security
The HTTP Strict Transport Security (HSTS) feature enables a web server to inform the user’s browser, via a special response header, that it should never establish an unencrypted HTTP connection to the specified domain servers. Instead, it should automatically establish all connection requests to access the site through HTTPS. This also prevents users from overriding certificate errors.

Here’s an example of the HSTS header implementation:

Strict-Transport-Security: max-age=31536000; includeSubDomains

The presence of this header must be checked,
as its absence could lead to security issues such as:

Attackers intercepting and accessing the information transferred over an unencrypted network channel.
Attackers carrying out manipulator-in-the-middle (MITM) attacks by taking advantage of users who accept untrusted certificates.
Users who mistakenly enter an address in the browser using HTTP instead of HTTPS, or users who click on a link in a web application that incorrectly uses the HTTP protocol.

Test Objectives
Review the HSTS header and its validity.
How to Test
Confirm the presence of the HSTS header by examining the server’s response through an intercepting proxy.
Use curl as follows:
$ curl -s -D- https://owasp.org | grep -i strict-transport-security:

https://hstspreload.org/

Test File Permission
How to Test
In Linux, use ls command to check the file permissions. Alternatively, namei can also be used to recursively list file permissions.

$ namei -l /PathToCheck/

The files and directories that require file permission testing can include, but are not limited to, the following:

Web files/directory
Configuration files/directory
Sensitive files(encrypted data, password, key)/directory
Log files(security logs, operation logs, admin logs)/directory
Executables(scripts, EXE, JAR, class, PHP, ASP)/directory
Database files/directory
Temp files/directory
Upload files/directory

TESTING SUB-DOMAIN TAKE OVER
Enumerate all possible domains (previous and current).
Identify any forgotten or misconfigured domains.

TESTING FOR CLOUD STORAGE
First, identify the URL to access the data in the storage service, and then consider the following tests:
read unauthorized data
upload a new arbitrary file

To test the ability to read an object:
curl -X GET https://<cloud-storage-service>/<object>
To test the ability to upload a file:
curl -X PUT -d 'test' 'https://<cloud-storage-service>/test.txt'

Testing for Amazon S3 Bucket Misconfiguration
The Amazon S3 bucket URLs follow one of two formats,
either virtual host style or path-style.

Virtual Hosted Style Access
Virtual Hosted Style Access:
https://bucket-name.s3.Region.amazonaws.com/key-name
https://my-bucket.s3.us-west-2.amazonaws.com/puppy.png
Path-Style Access: https://s3.Region.amazonaws.com/bucket-name/key-name

Test with the AWS-CLI
list: aws s3 ls s3://<bucket-name>
upload: aws s3 cp arbitrary-file s3://bucket-name/path-to-save
remove: aws s3 rm s3://bucket-name/object-to-remove
more:
https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingBucket.html

TESTING CSP
How to Test
To test for misconfigurations in CSPs, look for insecure configurations by examining the Content-Security-Policy HTTP response header or CSP meta element in a proxy tool:

unsafe-inline directive enables inline scripts or styles, making the applications susceptible to XSS attacks.
unsafe-eval directive allows eval() to be used in the application and is susceptible to common bypass techniques such as data URL injection.
unsafe-hashes directive allows use of inline scripts/styles, assuming they match the specified hashes.
Resources such as scripts can be allowed to be loaded from any origin by the use wildcard (*) source.
Also consider wildcards based on partial matches, such as: https://* or *.cdn.com.
Consider whether allow listed sources provide JSONP endpoints which might be used to bypass CSP or same-origin-policy.
Framing can be enabled for all origins by the use of the wildcard (*) source for the frame-ancestors directive. If the frame-ancestors directive is not defined in the Content-Security-Policy header it may make applications vulnerable to clickjacking attacks.
Business critical applications should require to use a strict policy.

Test Path Confusion
Black-Box Testing
Replace all the existing paths with paths that do not exist,
and examine the behavior and status code of the target.
For Web Cache Deception vulnerabilities, consider a path such as
https:// example.com/user/dashboard/non.js
White-Box Testing
Examine the application routing configuration, Most of the time, developers use regular expressions in application routing.
