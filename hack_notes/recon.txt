Recon
1. Confirm that active recon is allowed
2. Manual scope walk through - aim is to reveal the attack surface, all the end points we can launch an attack test
3. Uncover the tech and infra+structure of the application
4. Google dork for info to advance your hacking, eg: searching for payloads

Vuln Search
https://www.cvedetails.com/documentation/

SCOPE DISCOVERY
1. whois and reverse whois
2. nslookup
3. certificates searching with crt.sh
4. Enumerate subdomains
Sublist3r - query search engines + subdomain dbs
Gobuster - brute forcer
Amass - uses DNS zone transfers, certificate parsing, search engines, and subdomain databases to
find subdomains.
Altdns - https://github.com/infosec-au/altdns/
SubBrute - brute forcer
Subfinder

Wordlists
https://github.com/danielmiessler/SecLists/
https://github.com/assetnote/commonspeak2/

5. Service Enumeration (port scanning)
- nmap, masscan
passive reconn
Shodan
Project Sonar
Censys
6. Crawl all pages - ZAP Spider
7. Third Party Hosting 
- Use google dorking to plus tools like lazys3
https://buckets.grayhatwarfare.com/
to discover open buckets, use aws cli to read the bucket contents
https://github.com/nahamsec/lazys3/ - I can rewrite it in Rust/Go/TypeScript
8. Github Recon - tools 
Gitrob (https://github.com/michenriksen/gitrob/)
TruffleHog (https://github.com/trufflesecurity/truffleHog/) 
9. OSINT
10. Fingerprinting - 
- nmap domain_name -sV
- inspecting req headers in burp proxy
- view html sc  
tools - wapplyzer, builtwith, stackshare, retire.js


OWASP WSTG - 4.1.X
1 Conduct Search Engine Discovery Reconnaissance for Information Leakage
- Google dorking
- Use different search engines bc they index differently
- Get robots.txt file
2. Fingerprinting web servers
- banner grab ( curl -I domain)
- server response adds the server name and version
- if server obscures name and version, study response header ordering
Send Malformed Requests
- study default response error msgs
- tools - netcraft, nikto, nmap

3 Review Webserver Metafiles for Information Leakage
Identify hidden or obfuscated paths and functionality through the analysis of metadata files.
Extract and map other information that could lead to a better understanding of the systems at hand
- META tags
- Robots.txt
- Sitemaps
- Security.txt
- humans.txt
curl -O -Ss https://www.google.com/robots.txt && head -n5 robots.txt

3. Enumerate Applications on Webserver
Enumerate the applications within the scope that exist on a web server.
Different base urls - use site: operator
Nonstandard ports - web apps can be hosted on different ports != 443/80
nmap -sV
nmap –Pn –sT –sV –p0-65535
Virtual Hosts - DNS allows a single IP address to be associated with one or more symbolic names.

5 Review Web Page Content for Information Leakage
Review Web Page Comments and Metadata
Identifying JavaScript Code and Gathering JavaScript Files
Identifying Source Map Files
Identify Redirect Responses which Leak Information

Identify Application Entry Points
Identify possible entry and injection points through request and response analysis.
pay attention to all HTTP requests as well as every parameter and form field that is passed to the application
make special note of any hidden form fields that are being passed to the application
Used Attack Surface Detector to end points and parameters that they receive

Map Execution Paths Through Application
ZAP spidering
ZAP offers various automatic spidering options,
which can be leveraged based on the tester’s needs:
Spider
Ajax Spider
OpenAPI Support

Fingerprint Web Application Framework
Black-Box Testing
There are several common locations to consider in order to identify frameworks or components:
HTTP headers - X-Powered-By, X-Generator
Cookies
HTML source code
Specific files and folders
File extensions
Error messages

Map Application Arch
Web Framework, Web Server, PaaS, Serverless, Microservices
Database
Port scanning the server and looking for any open ports associated with specific databases
Triggering SQL (or NoSQL) related error messages (or finding existing errors from a search engine
Load Balancers
Content Delivery Network (CDN) [to read]
If the majority of the ports are shown as “closed” (i.e, they return a RST packet in response to the initial SYN packet), this suggests that the server may not be protected by a firewall. If the ports are shown as “filtered” (i.e, no response is received when sending a SYN packet to an unused port), then a firewall is most likely to be in place.
Network Intrusion Detection and Prevention System
Web App firewall
If a cloud-based WAF is in use, then it may be possible to bypass it by directly accessing the backend server, using the same methods discussed in the Content Delivery Network section.

TESTING HTTP METHODS
Enumerate supported HTTP methods.
Test for access control bypass.
Test HTTP method overriding techniques.

How to test
Discover the Supported Methods

! all servers may respond to OPTIONS requests
some may  return inaccurate information.
Servers may support different methods for different paths.
A method might not supported for the root / directory,
doesn't indicate that it won’t be supported elsewhere.

For reliability, just make a equest with that method type,
and examine the server response. If method not permitted,
you get return a 405 Method Not Allowed status.

Some servers treate unknown methods as equivalent to GET,
so they may respond to arbitrary methods
This can occasionally be useful to evade a web application firewall,
or any other filtering that blocks specific methods.

Requests with arbitrary methods can also be made using curl with the -X option:
curl -X FOO https://example.org
Using PUT to upload files to older webservers
curl https://example.org --upload-file test.html
Using DELETE to delete files form a webserver
curl https://example.org/test.html -X DELETE


Testing for Access Control Bypass
If application redirects users to a login page with a 302 code,
it may be possible to bypass this by making a request with a different HTTP method,
such as HEAD, POST or even a made up method such as FOO.
If the web application responds with a HTTP/1.1 200 OK rather than the expected HTTP/1.1 302 Found,
it may then be possible to bypass the authentication or authorization.


Testing for HTTP Method Overriding
Some web frameworks provide a way to override the HTTP method in the request.
They achieve this by emulating the missing HTTP verbs and passing some custom headers in the requests.
The main purpose of this is to circumvent a middleware application
(such as a proxy or web application firewall)
which blocks specific methods.
The following alternative HTTP headers could potentially be used:

X-HTTP-Method
X-HTTP-Method-Override
X-Method-Override

Preflight request
A CORS preflight request is a CORS request that checks to see if the CORS protocol is understood and a server is aware using specific methods and headers.

OPTIONS	List supported HTTP methods.	Perform a CORS Preflight request.

Test HTTP Strict Transport Security
The HTTP Strict Transport Security (HSTS) feature enables a web server to inform the user’s browser, via a special response header, that it should never establish an unencrypted HTTP connection to the specified domain servers. Instead, it should automatically establish all connection requests to access the site through HTTPS. This also prevents users from overriding certificate errors.

Here’s an example of the HSTS header implementation:

Strict-Transport-Security: max-age=31536000; includeSubDomains

The presence of this header must be checked,
as its absence could lead to security issues such as:

Attackers intercepting and accessing the information transferred over an unencrypted network channel.
Attackers carrying out manipulator-in-the-middle (MITM) attacks by taking advantage of users who accept untrusted certificates.
Users who mistakenly enter an address in the browser using HTTP instead of HTTPS, or users who click on a link in a web application that incorrectly uses the HTTP protocol.

Test Objectives
Review the HSTS header and its validity.
How to Test
Confirm the presence of the HSTS header by examining the server’s response through an intercepting proxy.
Use curl as follows:
$ curl -s -D- https://owasp.org | grep -i strict-transport-security:

https://hstspreload.org/

Test File Permission
How to Test
In Linux, use ls command to check the file permissions. Alternatively, namei can also be used to recursively list file permissions.

$ namei -l /PathToCheck/

The files and directories that require file permission testing can include, but are not limited to, the following:

Web files/directory
Configuration files/directory
Sensitive files(encrypted data, password, key)/directory
Log files(security logs, operation logs, admin logs)/directory
Executables(scripts, EXE, JAR, class, PHP, ASP)/directory
Database files/directory
Temp files/directory
Upload files/directory

TESTING SUB-DOMAIN TAKE OVER
Enumerate all possible domains (previous and current).
Identify any forgotten or misconfigured domains.

https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/10-Test_for_Subdomain_Takeover [Re Read and follow links to learn deeper ]

TESTING FOR CLOUD STORAGE
First, identify the URL to access the data in the storage service, and then consider the following tests:
read unauthorized data
upload a new arbitrary file

To test the ability to read an object:
curl -X GET https://<cloud-storage-service>/<object>
To test the ability to upload a file:
curl -X PUT -d 'test' 'https://<cloud-storage-service>/test.txt'

Testing for Amazon S3 Bucket Misconfiguration
The Amazon S3 bucket URLs follow one of two formats,
either virtual host style or path-style.

Virtual Hosted Style Access
Virtual Hosted Style Access:
https://bucket-name.s3.Region.amazonaws.com/key-name
https://my-bucket.s3.us-west-2.amazonaws.com/puppy.png
Path-Style Access: https://s3.Region.amazonaws.com/bucket-name/key-name

Test with the AWS-CLI
list: aws s3 ls s3://<bucket-name>
upload: aws s3 cp arbitrary-file s3://bucket-name/path-to-save
remove: aws s3 rm s3://bucket-name/object-to-remove
more:
https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingBucket.html

TESTING CSP
How to Test
To test for misconfigurations in CSPs, look for insecure configurations by examining the Content-Security-Policy HTTP response header or CSP meta element in a proxy tool:

unsafe-inline directive enables inline scripts or styles, making the applications susceptible to XSS attacks.
unsafe-eval directive allows eval() to be used in the application and is susceptible to common bypass techniques such as data URL injection.
unsafe-hashes directive allows use of inline scripts/styles, assuming they match the specified hashes.
Resources such as scripts can be allowed to be loaded from any origin by the use wildcard (*) source.
Also consider wildcards based on partial matches, such as: https://* or *.cdn.com.
Consider whether allow listed sources provide JSONP endpoints which might be used to bypass CSP or same-origin-policy.
Framing can be enabled for all origins by the use of the wildcard (*) source for the frame-ancestors directive. If the frame-ancestors directive is not defined in the Content-Security-Policy header it may make applications vulnerable to clickjacking attacks.
Business critical applications should require to use a strict policy.

https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/12-Test_for_Content_Security_Policy [ Dive Deeper ]


Test Path Confusion
Black-Box Testing
Replace all the existing paths with paths that do not exist,
and examine the behavior and status code of the target.
For Web Cache Deception vulnerabilities, consider a path such as
https:// example.com/user/dashboard/non.js
White-Box Testing
Examine the application routing configuration, Most of the time, developers use regular expressions in application routing.

https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/13-Test_for_Path_Confusion [ Learn about Web Cache Posoining in Reference Links]









