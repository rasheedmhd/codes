GraphQL Questions to Impact
===========================
Does the web server even have a GraphQL API? 
On which endpoint is GraphQL configured to receive queries? 
What language is the GraphQL implementation written in? 
What implementation of GraphQL is running on the target server? 
Is the implementation known to be vulnerable to certain attacks? 
What types of defenses exist for the specific GraphQL implementation? 
What are some of the out-of-the-box default configuration settings of this implementation? 
Does the GraphQL server have any additional security protection layers in place?

Detecting GraphQL
Manual guessing of possible graphql impl end Points
Guessing usage of tools like graphiql 
Server implementation Language
Apollo TypeScript
Graphene Python
[
    app.add_url_rule('/graphql', view_func=GraphQLView.as_view(
        'graphql',
        schema=schema
    ))
    app.add_url_rule('/graphiql', view_func=GraphQLView.as_view(
        'graphiql',
        schema = schema,
        graphiql = True
    ))
]
each endpoint could have different security settings.
One could be stricter than the other

Yoga TypeScript
Ariadne Python
graphql-ruby Ruby
graphql-php PHP
graphql-go Go
graphql-java Java
Sangria Scala
Juniper Rust
HyperGraphQL Java
Strawberry Python
Tartiflette Python

End points list 
https://github.com/dolevf/Black-Hat-GraphQL/blob/master/ch04/common-graphql-endpoints.txt

Common Responses
This is basically comparing the return message with the nature of GraphQL responses 
"data": {
    #valid
    #query response information 
}

"errors": [{
        #invalid 
        #what went wrong 
    }]

Detecting GraphQL end points using
Nmap, using the http-grep NSE script
nmap -p 5013 -sV --script=http-grep 
--script-args='match="Must provide query string", 
http-grep.url="/graphql"' localhost

GraphQL servers could run on any
port, but a few are quite common, such as 80–89, 443, 4000–4005, 8443,
8000, and 8080. 

When GraphQL servers accept queries using GET, you can pass the
query parameter along with the GraphQL query (in this case, the query
{__typename}) by using shorthand syntax. With this in mind, we can automate the detection of GraphQL by using Nmap fairly easily. Listing 4-6
shows how to run a __typename query with Nmap.
# nmap -p 5013 -sV --script=http-grep --script-args='match="__typename",
http-grep.url="/graphql?query=\{__typename\}"' localhost

If you have more than a handful of hosts to scan, you may want to leverage Nmap’s -iL flag to point to a file that contains a list of hostnames, as
nmap -p 5013 -iL hosts.txt -sV ........

If the GraphQL server does not support GET-based queries, we can use
cURL and the __typename field to make a POST request to detect GraphQL

curl -X POST http://localhost:5013/graphql -d '{"query":"{__typename }"}'
-H "Content-Type: application/json"

List of Host, using bash 
for host in $(cat hosts.txt); do
    curl -X POST "$host" -d '{"query":"{__typename }"}' -H "Content-Type: application/json"
done

GraphW00f 
-d detect
-t target 
-
python3 main.py -d -t http://localhost:5013

Scanning for Graphical Interfaces with EyeWitness
-h help
-d dump report
--web uses headless browser 
--single target url 
eyewitness --web --single http://localhost:5013/graphiql -d dvga-report


INTROSPECTION
one of the first things we want to test when we run into a
GraphQL application is whether its introspection mechanism is enabled.

Many GraphQL implementations enable introspection by default. 
Some implementations might have an option to disable introspection, but others might not. 
For example, the Python GraphQL implementation,
Graphene does not provide the option to disable introspection. 
However graphql-php offers an option to disable introspection

The State of Introspection in GraphQL Implementations
Language | Implementation | Introspection configuration |  Disable introspection option
---------|----------------|-----------------------------|------------------------------
Python    Graphene        Enabled by default            Not available
Python    Ariadne         Enabled by default            Available
PHP       graphql-php     Enabled by default            Available
Go        graphql-go      Enabled by default            Not available
Ruby      graphql-ruby    Enabled by default            Available
Java      graphql-java    Enabled by default            Not available

query IntrospectionQuery {
    __schema {
        queryType { name }
        mutationType { name }
        subscriptionType { name }
        types {
            kind
            name
            fields {
                name    
                args {
                    name
                }
            }
        }
    }
}

Using nmap to detect when introspection is enabled
nmap --script=graphql-introspection -iL hosts.txt -sV -p 5013

Full fledged Introspection script 
https://github.com/dolevf/Black-Hat-GraphQL/blob/master/queries/introspection_query.txt