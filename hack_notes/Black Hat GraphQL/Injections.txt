Injection vulnerabilities occur when an application accepts and processes
untrustworthy input without any sanitization. 

Sanitization is a security
measure that involves checking input and removing potentially dangerous
characters from it.

An application could accidentally introduce injection vulnerabilities in
a variety of ways, including the following:
•  The application does not implement security checks on the input it
receives.
•  The application uses insecure libraries (such as a parser) to process
user input.
•  The application passes the received user input to a third system, which
doesn’t implement security checks on the input.
•  The application accepts input and displays it to the client without transforming it in any way

Causes
- Allowing clients to manipulate data through interfaces 
such as the arguments of queries, mutations, or subscriptions. 

- allowing clients to only read data might
have vulnerabilities in certain interfaces, such as query filters. 

. Such a trust model assumes that input coming into the GraphQL API from other
internal systems on the same network is safe, while input that originates
from external sources is unsafe. This approach is very common, 
but designing systems in this way can backfire

For each of these interfaces, you should ask yourself a few important questions:
•  Is the application verifying the incoming client input at all?
•  Does the application accept dangerous characters?
•  Does the application throw exceptions when unexpected characters are
sent as part of a query?
•  Does GraphQL check the value type passed to the arguments?
•  Can we infer from the GraphQL server response (or out-of-band
response) whether an injection attempt was successful?

The Injection Attack Surface
Query Arguments
operations such as queries, mutations, and subscriptions can be
designed to accept arguments
What happens if we pass -1/-<N>
Sometimes APIs interpret -1 value as return all, in
which case the server will return the entire list of objects. HUH?
query {
    pastes(limit: 100) {
        id
        ipAddr
    }
}

String: Experiment with malicious payloads
mutation {
        createPaste(content: "Some content", title:"Some title", public: false) {
        paste {
            id
            ipAddr
        }
    }
}

Field Arguments
Just like top-level fields, GraphQL fields in selection sets can also take arguments. 
Example: 
query {
    users {
        username(capitalize: true)
        id
    }
}

Query Directive Arguments
query {
    pastes {
        id
        ipAddr @show_network(style: "cidr")
    }
}
Return a list of the directives in the schema
query GetDirectives {
        __schema {
        directives {
            name
            description
            locations
        }
    }
}

Operation Names
check whether the GraphQL API allows special characters
as part of the operation name, as this could turn out to be an injectable
interface.

Interesting potential injection vectors because
applications can use them in many ways
Some use cases
- Debugging and Logging
- Analytics
- Databases (+ cache db)
- Admin dashboards 

INPUT ENTRY POINTS
To test for SQLi you need end points to inject payloads
1. User Altair to read docs from introspection
2. If introspection is disabled use clairvoyance to fuzz 
and build up the schema 

SQL INJECTIONS 
SQLi in GraphQL can be introduced through any interface that accepts
client input. 

SQLi Impact
Confidentiality - leaked info, potential PII 
Integrity - Modifications to data 
Availability - Deletions of data 

Types 
Classic SQLi
Error-based SQLi is used to identify SQLi vulnerabilities through error
observation
Union-based SQLi is used to identify SQLi vulnerabilities by leveraging
the UNION SQL operator. 

Blind SQL Injection
In blind SQLi, we are given no visible indications that a vulnerability exists.
Time-based SQLi forces the application to wait for a certain amount
of time before returning a response. 
Boolean-based SQLi allows us to infer whether the application is vulnerable 
to SQLi by constructing a payload that will return a Boolean result such
as true or false. 

Testing for SQLi
Submitting characters like single (') or double (") quotes and observing
how the application handles unexpected inputs and errors.
•  Fuzzing input fields and observing application errors that may indicate
database query failures.
•  Submitting SQL commands that introduce delays, such as by using
BENCHMARK and SLEEP for MySQL databases, WAITFOR DELAY and WAITFOR TIME
for Microsoft SQL Server, or pg_sleep for PostgreSQL databases, and
then performing a response-timing analysis to identify whether the
injection was successful.

Automating SQL Injection
When performing a SQLi test, you can take any potential GraphQL
query and use an asterisk (*) to mark a specific position where SQLmap
should inject payloads. For example, consider the following snippet:
query {
    pastes(filter:"test*") {
        id
    }
}

HackerOne SQLi Payload 
time curl -X POST https://hackerone.com/graphql\?embedded_submission_form_uuid\=
1%27%3BSELECT%201%3BSELECT%20pg_sleep\(10\)%3B--%27

Apache Skywalker SQLi Payload
query SQLi($d: Duration!) {
    getLinearIntValues(metric: {name: "all_p99", id: "') UNION SELECT 1,CONCAT('~','9999999999','~')--"}, duration: $d)
    {
        values {
            value
        }
    }
}

sqlmap -r request.txt —dbms=sqlite —tables

OS Command injection Automated Testing with Commix
OS command injection can happen if a resolver function
accepts arguments from a GraphQL field without implementing the necessary verifications on the input

When performing source code review, look for
the following imported libraries and functions, and see if their commands
are constructed using custom user input:
•  Python libraries such as subprocess and os and functions like exec and eval
•  PHP functions such as system, shell_exec, eval, and exec
•  Java functions such as Runtime.exec()
•  Node.js modules such as child_process and functions like exec and spawn
query {
systemDebug(arg:"; uptime")
}

Automated Testing with Commix
commix --url="http://127.0.0.1:5013/graphql"
--data='{"query":"query{systemDebug(arg:\"test \")}"}' -p arg

https://www.petecorey.com/blog/2017/06/12/graphql-nosql-injection-through-json-types/