Authentication and Authorization
Hackers have defeated both authentication and authorization
defenses by taking advantage of 
Weak passwords 
Default credentials 
Forged tokens
Flawed account recovery processes
Replay attacks 
And poor rate limit controls.

Rate Limiting 
1 Complexity based 
2 Time based 

Summary 
• Rate limiting GraphQL requires more thought than a typical endpoint based API.
• A complexity or time-based approach is your best choice for rate limiting clients.
• Timeouts are a must to avoid long-running queries taking up too much server time.
• Query depth is not as important as advertised, complexity and node count is often enough.
• Authorizing object types is often simpler and less error-prone than authorizing fields.
• Disabling introspection is a good idea for private APIs, but should be
avoided for public APIs.
• Persisted queries are a very powerful concept, especially for internal APIs.

Spec does say how to impl authz 
Implementors cook their own thing 
Following 2 archs 
in-band 
ac are done in the GraphQL API 
- more prone to vulnerabilities
- increases the API complexity and attack surface
- duplicates auth logic on endpoints
out-of-band 
ac are done on a separate internal web service

Best Practice 
Delegate all authz to the business logic layer
that sits btn the GraphQL API layer and the DB
The business logic layer should serve as the 
single truth of all auth business domain rules

Common approaches 
HTTP Basic Auth 
Authorization: Basic <base64 encoded username + password>
- Lacks confidentiality
- Lacks a logout feature to invalidate active sessions 

OAuth 2.0 
https://datatracker.ietf.org/doc/html/rfc6749.

JWT JSON Web Tokens
https://datatracker.ietf.org/doc/html/rfc7519
A common attack against applications using JWT involves setting the alg
header parameter to none. If an application accepts unsigned JWT tokens,
hackers can tamper with their JWT token to identify as another user or perform sensitive actions.

GraphQL Modules 
Prevalent in JS based impls
separates GraphQL schemas into
smaller, reusable modules that act as middleware. Developers can then
use these to wrap their resolvers

GraphQL Shield 
https://the-guild.dev/graphql/shield/docs
Allow developers to define rules that either permit or deny client access. 
When performing a code review, look for the GraphQL Shield component 
called the fallbackRule. 
This rule can determine whether a request should be allowed or denied by 
default whenever a rule is not defined. 
By default, fallbackRule is set to allow. 
https://the-guild.dev/graphql/shield/docs/rules#logic-rules

Scheme Directives 
might use custom schema-level directives to apply
both authentication and authorization controls on 
certain operations and fields. 
By decorating schema components, these custom directives 
can control what clients can and can’t do in the API.

IP-Based Auth
they might opt to use an allow list of source IP addresses
to authorize clients. In this technique, the server checks the client IP
address included in a network request against a list of addresses or network
range (such as 10.0.0.0/24).


Testing Auth 
An impl might allow harmless queries by Unauthenticated Users
- Make a canary req to detect the authentication layer
HTTP STATUS codes
=================
Most GraphQL impls returns a 200 OK status code, even when the query contains typos or errors. 
However, if you receive a 403 Forbidden Error, it’s possible that out-of-band authentication 
and authorization control, like a gateway or a WAF, has blocked your request
Error Messages
================
EM                        Possible authentication implementation
Authentication credentials 
are missing.
Authorization header is 
required and must
contain a value.          OAuth 2.0 Bearer with JSON Web Token

Not Authorised!           GraphQL Shield

Not logged in             GraphQL Modules
Auth required
API key is required      

Invalid token!           graphql-directive-auth
Invalid role!


Authentication-Related Fields
Another great way to detect an authentication layer is to use introspection
queries to identify any authentication-related query or mutation operations.
{
        __schema {
            mutationType {
                name
                kind
            fields {
                name
                description
            }
        }
    }
}

Brute-Forcing Passwords by Using Query Batching
There are two types of batch operations: array-based and alias-based.
Tools like BatchQL leverage array-based query batching to send multiple
operations in a single request.

https://github.com/dolevf/Black-Hat-GraphQL/blob/master/ch07/password-brute-force.graphql.

mutation {
    alias1: login(username: "admin", password: "admin") {
        accessToken
    }
    ...
    aliasN: login(username: "admin", password: "password") {
        accessToken
    }
}

If a security control protects the API by banning clients from
making more than, say, five HTTP login requests per minute, 
We can make an attack that evades such logic by sending only a 
single HTTP request while performing 10 login attempts/actions

Brute-Forcing Passwords with CrackQL
-t target 
-i input
-q query 
-- verbose 
-b batch for cases where GraphQL cost analysis blocks large queries

Other uses. 
Using a list of possible one-time password tokens to
- brute-force twofactor authentication. 
- perform account enumeration attacks, by automating 
the scanning for valid emails or usernames
- fuzz for unique object identifiers to exploit IDORs vulns,

Using Allow-Listed Operation Names
Certain in-band GraphQL implementations may make some queries and
mutations publicly available for unauthenticated clients, such as those for
login or account registration

Forging and Leaking JWT Credentials
When they JWT aren’t encrypted, they may leak sensitive data.


Testing Authorization
Finding Schema Directives
Developers sometimes impl authorization with schema directives. 
You can identify these schema directives if you
- have access to the API’s SDL files. 
- also you can send a specialized introspection query

{
    __schema {
            directives {
            name
            args {
                name
            }
        }
    }
}
look for names like @authorize, @authorization, @authz

Finding Authentication Directives in the Schema
You’ll find scanning the schema for @auth directives useful in white-box
penetration tests, which provide you with the SDL files. But in black-box
tests that provide no access to the schema, you might know that the password
field exists, for example, but not that the @auth directive applies to it.

Enumerating Paths with graphql-path-enum
When implementing in-band authorization, 
a developer might accidentally protect only some of these queries. As such,
determine all possible paths to a given object type.
Schemas can be very large, so you’ll find it helpful to automate the process
of identifying all paths to a given object type.

graphql-path-enum expects two important arguments: 
1 The introspection JSON response
2 The name of an object type we want to test for authorization issues.

Tut:
1 Run intro query. 2 Copy Response. 3 Pass resp path to tool and 
ask it to search to paths leading to the object
./graphql-path-enum -i introspection.json -t PasteObject

Brute-Forcing Arguments and Fields with CrackQL