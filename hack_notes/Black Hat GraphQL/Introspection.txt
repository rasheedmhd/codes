Introspection
=============
A built-in tool that empowers clients to discover actions they can take using
a GraphQL API. Introspection lets clients query a GraphQL server for
information about its underlying schema, which includes data like queries,
mutations, subscriptions, directives, types, fields, and more.

The introspection system has seven introspection types that
we can use to query the schema

_Schema     : all information about the schema of a GraphQL service
_Type       : all information about a type 
_TypeKind   : provides the different kinds of types (scalars, objects, interface, union, enum, and so on)
_Field      : provides all information for each field of an object or interface type
_InputValue : provides field and directive argument information
_EnumValue  : provides one of the possible values of an enum
_Directive  : information on both custom and built-in directives


Validation and Execution
All GraphQL query requests are tested for their validity against the schema
and type system before they are executed and resolved by the server.

The GraphQL spec outlines several validation types. 
These include
document, operation, 
field, argument, 
fragment, value, 
directive, and variable validations.

COMMON WEAKNESSES
Specification Rule and Implementation Weaknesses
GraphQL’s specification defines rules, design principles, and standard practices. If you ever want to develop your own GraphQL implementation, this
is the document your implementation should conform to, including the way
it formats its responses, validates arguments, and so on

Yet complying with these rules is the developer’s responsibility, which
is where discrepancies may happen. In fact, the GraphQL spec doesn’t care
about how implementations conform to the spec

1 Denial of Service
2 Information Disclosure
3 Authentication and Authorization Flaws
4 Injections 

Use InQL for for Introspection is disabled
Detect disabled introspection 
Exploit non-production environments - bc of security differences


Bypassing introspection
if __schema fails try 
query S {
  __schema {
      __typename
  }
}
the WAF blocking the intro req might be searching for 
the __schema meta-field and blocking it, like in AWS 
AppSync's case 

Use Field Suggestions 
The Edit Distance Algorithm 
To determine whether a typo is similar to a valid object, field, or argument
in the schema, GraphQL implementations rely on the simple edit-distance
algorithm. 
a pull request was made on January 28, 2022, to disable field 
suggestions whenever introspection is disabled. 
If merged, this pull request would
make it difficult to abuse field suggestions when introspection is disabled

Using Field Stuffing 
We can use field stuffing to
potentially discover sensitive information like passwords, keys, and PII by
guessing and passing these potential field names into a query request that
we know works
Take into consideration variable naming conventions 
snake_case or lowerCamelCase 
Stuff field meta-tags 

Automating Field Suggestion and Stuffing Using Clairvoyance
Get a suitable word list for the target 
# cd ~/clairvoyance
# python3 -m clairvoyance http://localhost:5013/graphql
-w ~/high-frequency-vocabulary/30k.txt -o clairvoyance-dvga-schema.json
# cd ~/clairvoyance
python3 -m clairvoyance https://flyby-router-demo.herokuapp.com/ 
-w ../high-frequency-vocabulary/30k.txt -o clairvoyance-apollo-schema.json


Abusing Error Messages
Error Message structure
Message
Location
Path - references a particular field and is used to determine 
Extensions - extend the message, location, and path fields 
whether a null result is intentional or caused by a runtime error
Most information disclosure weaknesses
occur in the message field

Enabled Debug Mode 
Some impl have debug on by default
- might be through env vars 
- parameters : see Magento's 
?XDEBUG _SESSION_START=PHPSTORM
- cookies 
Not All impl support 
Many also support tracing, tracking the amount of time it 
takes for GraphQL to complete a query and adds that data 
to the extensions key 
http://example.com/graphql?debug=1
Some impl log debug msgs to the console be sure to 
monitor the console tab

Inferring Information from Stack Traces
Various GraphQL endpoints on the same server
could have different configuration settings. 
For example, DVGA’s /graphql endpoint does not throw
stack traces to client requests that raise an error.
However, the /graphiql does 

Leaking Data by Using GET-Based Queries
some GraphQL implementations allow
clients to execute queries using the GET method
Because GET requests transmit data as query parameters in the URL,
they risk exposing sensitive information.