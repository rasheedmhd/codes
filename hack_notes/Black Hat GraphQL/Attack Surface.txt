CLOSED TABS 
https://graphql.org/learn/schema/
https://hasura.io/learn/
https://the-guild.dev/graphql/tools/docs/generate-schema
https://medium.com/apollo-stack/graphql-at-facebook-by-dan-schafer-38d65ef075af#.jduhdwudr


Attack Surface 
All the available vectors an attacker can use to compromise the 
CIA (Confidentiality, Integrity and Availability) of a system.

Attack surfaces are dynamic: Especially in the increasing cloud 
services nature of the internet.

Some Parts of a GraphQL query
Operation type 
Operation name/label 
Top-Level Field 
Arguments - of [ Top Level Field, Directive, Field ]
Value 
Field 
Directive

Operation Types
query {
    # reads data from the server
}

Example of a Mutation that modifies and then reads data from the server.
mutation {
    editPaste(id: 1, content: "My first mutation!") {
        paste {
            id
            title
            content
        }
    }
}

Mutations
=========
Mutations are almost exactly like query fields. 
Two things make them slightly different:
• Top-level fields under the mutation root are allowed to have side effects /
make modifications.
• Top-level mutation fields must be executed serially by the server, while
other fields could be executed in parallel.

Subscriptions 
==============
The subscription operation works bidirectionally: it allows clients to retrieve
real-time data from a server, and allows servers to send updates to clients.
typically carried across WebSockets 
GraphQL doesn't specify which communication protocol to use hence others use other protocols

WebSocket connections are prone to Cross-Site WebSocket Hijacking (CSWSH) vulnerabilities, 
which happen when the server does not validate the origin of a client in the handshake process.
WebSocket connections can also be vulnerable to man-in-the-middle (MITM) attacks when the transport 
of messages isn’t carried over an encrypted channel such as Transport Layer Security (TLS).

Operation Names
================
Are labels used to uniquely identify an operation in certain contexts. 

They are chosen arbitrarily and the function body could do a completely different thing than what its name says. 

Because operation names are client-driven inputs, they could also
potentially be used as attack vectors for injection. 
Some implementations of GraphQL allow special characters in operation names. 
Applications can store these names, in logs, other backend systems. Blind XSS ?

Fields
=======
A field is a single piece of information available within an operation’s selection set.
Fields can contain other fields in their selection sets, this can give rise to cyclic 
references that can lead to DoS. Graphql-path-enum can help us discover and exploit these.

Field suggestions helps us with typos when we call fields that don't exist.

Arguments
=========
Can be implemented at various levels — namely, in fields and directives.
Arguments are unordered, which means that changing their order does not change the logic of the query.

Impl differences can lead to vulnerabilities, since they are not specified in th spec document.

Aliases
========
Allow clients to change a field’s response key to something other than the original field’s name. 
For example, here we use myalias as an alias for the title field name:
query {
    pastes {
        myalias:title
    }
}
Used here to prevents conflicts that leads to errors
Query {
    queryOne:pastes(public: false) {
        title
    }   
    queryTwo:pastes(public: true) {
        title
    }
}

Fragments
=========
Provides reusability of same set of fields in a GraphQL query
for readability and to avoid field repetition. 
You can define a fragment once and use it whenever you need that particular set of fields.
fragment CommonFields on PasteObject {
    title
    content
}
Usage
query {
    pastes {
        ...CommonFields
    }
}
Fragments can be constructed in a way that they reference each other leading to DoS 


Variables
=========
You can supply variables to operations as argument values by declaring them
within the GraphQL document. They avoid costly string building during runtime.
Variables are defined at the top of an operation, after the operation
name. 
query publicPastes($status: Boolean!){
    pastes(public: $status){
        id
        title
        content
    }
}

Directives
=========== 
Directives allow you to decorate, or change the behavior of a field within a document. 
Directives affect field validation, processing, or execution by the application. 

Directive Types
Query Level 
Schema Level 

Examples:
@skip @include @deprecated @specifiedBy 
The @skip, @include, @deprecated, and @specifiedBy directives are required;
GraphQL server implementations must support them to be considered spec compliant.

One example of a widely adopted custom directive is @computed. 
This powerful schema-level directive saves implementers from
having to create resolver functions for fields that can be computed from the
values of other fields in the schema. 

Using the @computed directive to merge the firstName and lastName fields into fullName field.

Attackers mind, if the server uses @computed a malicious script can be provided
partially in fields and @computed could compute them into something malicious

type User {
    firstName: String
    lastName: String
    fullName: String @computed(value: "$firstName $lastName")
}

Impl differences can lead to vulnerabilities, since they are not specified in th spec document.
