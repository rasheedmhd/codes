If the API is for select customers or internal use, you’ll have to rely
on other clues: naming conventions, HTTP response header information
such as Content-Type: application/json, HTTP responses containing JSON/
XML, and information about the JavaScript source files that power the
application.

Passive Recon
OSINT
Google Dorking 
Programmableweb.com 
Shodan.io 
Amass 
amass enum -passive -d <domain_name> |grep api
amass enum -passive -d glassdoor.com |grep api
amass intel -addr <target IP addresses>
amass intel -d <target domain> –whois
amass enum -active -brute -w /usr/share/wordlists/API_superlist -d <target domain> -dir
<directory name>
Exposed Information on Github 
- gitrob 
- code ctrl+f for api and tokens and sensitive info 
- issues, active and merged, PRs 

Active Recon 
- opportunistic exploitation 
- detections and scanning
- hands on analysis
- targeted scanning 

Nmap 
The Nmap general detection scan uses default
scripts and service enumeration against a target and then saves the output
in three formats for later review (-oX for XML, -oN for Nmap, -oG for greppable, or -oA for all three formats)

$ nmap -sC -sV <target address or network range> -oA nameofoutput
The Nmap all-port scan will quickly check all 65,535 TCP ports for running services, application versions, and host operating system in use:
$ nmap -p- <target address> -oA allportscan

Find robots.txt 
Finding Sensitive Information with Chrome DevTools
Burp Proxy Intercept 
OWASP ZAP for spidering 
ZAP Manual explore
Gobuster 
$ gobuster dir -u http://192.168.195.132:8000 -w /home/hapihacker/api/wordlists/common_apis_160
Kiterunner
kr scan http://192.168.195.132:8090 -w ~/api/wordlists/data/kiterunner/routes-large.kite
kr brute <target> -w ~/api/wordlists/data/automated/nameofwordlist.txt

# Just have a list of hosts and no wordlist
kr scan hosts.txt -A=apiroutes-210328:20000 -x 5 -j 100 --fail-status-codes 400,401,404,403,501,502,426,411

# You have your own wordlist but you want assetnote wordlists too
kr scan target.com -w routes.kite -A=apiroutes-210328:20000 -x 20 -j 1 --fail-status-codes 400,401,404,403,501,502,426,411

# Bruteforce like normal but with the first 20000 words
kr brute https://target.com/subapp/ -A=aspx-210328:20000 -x 20 -j 1

# Use a dirsearch style wordlist with %EXT%
kr brute https://target.com/subapp/ -w dirsearch.txt -x 20 -j 1 -exml,asp,aspx,ashx -D

When you have a single target
# single target
kr scan https://target.com:8443/ -w routes.kite -A=apiroutes-210228:20000 -x 10 --ignore-length=34

# single target, but you want to try http and https
kr scan target.com -w routes.kite -A=apiroutes-210228:20000 -x 10 --ignore-length=34

# a list of targets
kr scan targets.txt -w routes.kite -A=apiroutes-210228:20000 -x 10 --ignore-length=34

Vanilla Bruteforcing 
kr brute https://target.com -A=raft-large-words -A=apiroutes-210228:20000 -x 10 -d=0 --ignore-length=34 -ejson,txt